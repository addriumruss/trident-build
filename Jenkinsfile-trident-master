/*

This is the default Jenkins Pipeline file used to create our
full weekly build images.

*/

pipeline {
  agent { label 'Trident-Master' }
  
  triggers {
    cron('01 17 * * 5')
  }

  environment {
    // Set the MANIFEST we want to use for this build
    TRUEOS_MANIFEST='trident-master.json'
  }

  stages {
    stage('Queued') {
      agent {
        label 'JenkinsMaster'
      }
      steps {
        echo "Build queued"
      }
    }
    stage('Prepare') {
      steps {
        checkout scm
        sh '${WORKSPACE}/build-distro.sh clean'
	sh '${WORKSPACE}/build-distro.sh checkout'
      }
    }
    stage('World') {
      steps {
        sh '${WORKSPACE}/build-distro.sh world'
      }
    }
    stage('Kernel') {
      steps {
        sh '${WORKSPACE}/build-distro.sh kernel'
      }
    }
    stage('Base Packages') {
      environment {
	   // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('Trident-sign')
      }
      steps {
        sh '${WORKSPACE}/build-distro.sh base'
      }
    }
    stage('Ports') {
      environment {
	   // Get our credentials from Jenkins
           PKG_REPO_SIGNING_KEY = credentials('Trident-sign')
      }
      steps {
        sh '${WORKSPACE}/build-distro.sh ports'
      }
    }
    stage('Make ISO') {
      post {
        success {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
      }
      steps {
        sh '${WORKSPACE}/build-distro.sh release'
      }
    }

    stage('Stage') {
      environment {
        REMOTE_USER='poseidon'
        REMOTE_SERVER='pkg.project-trident.org'
        REMOTE_PKG_DIR='/data/pkg/stage'
        REMOTE_ISO_DIR='/data/iso/stage'
        POUDRIERE_BASE= sh (
		script: 'basename -s ".json" "${TRUEOS_MANIFEST}"',
		returnStdout: true
		).trim()
        POUDRIERE_PORTS= sh (
		script: 'jq -r \'."ports-branch"\' "${TRUEOS_MANIFEST}"',
		returnStdout: true
		).trim()
        ABI= sh (
		script: 'pkg-static -o ABI_FILE=/bin/sh config ABI',
		returnStdout: true
		).trim()
      }
      steps {
        sshagent (credentials: ['Trident-publish']) {
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_PKG_DIR}/ports/${ABI}/latest || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/local/poudriere/data/packages/${POUDRIERE_BASE}-${POUDRIERE_PORTS}/ ${REMOTE_USER}@${REMOTE_SERVER}:/${REMOTE_PKG_DIR}/ports/$(pkg-static -o ABI_FILE=/bin/sh config ABI)/latest/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_PKG_DIR}/base/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/obj${WORKSPACE}/base/repo/ ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_PKG_DIR}/base/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_ISO_DIR}/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifacts/ ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_ISO_DIR}'
        }
      }
    }
  }
  post {
    success {
      sh '${WORKSPACE}/build-distro.sh clean'
      script {
        cleanWs notFailBuild: true
      }
    }
  }
}
