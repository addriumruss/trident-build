/*

This is the default Jenkins Pipeline file used to create our
full weekly build images.

*/

pipeline {
  agent { label 'Trident-Master' }
  
  triggers {
    cron('01 17 * * 5')
  }

  environment {
    GH_ORG = 'trueos'
    GH_REPO = 'trueos'
    GH_COMMIT = 'fa44468db5fb87f041f749f9086d080b40614eb7'
    GH_CO_DIR = '${WORKSPACE}/trueos'
    MAX_THREADS = '79'
    POUDRIERE_BASE = 'trident-master'

    // Set the MANIFEST we want to use for this build
    TRUEOS_MANIFEST='${WORKSPACE}/trident-master.json'
  }

  stages {
    stage('Queued') {
      agent {
        label 'JenkinsMaster'
      }
      steps {
        echo "Build queued"
      }
    }

    stage('Checkout') {
      steps {
	checkout([
		$class: 'GitSCM', 
		branches: [[name: 'fa44468db5fb87f041f749f9086d080b40614eb7']],
		doGenerateSubmoduleConfigurations: false,
		extensions: [[$class: 'CloneOption', noTags: true, reference: '', shallow: true]],
		submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/trueos/trueos.git']]
		])
      }
    }

    stage('Pre-Clean') {
      steps {
        sh 'make clean'
        sh 'cd release && make clean'
      }
    }
    stage('World') {
      steps {
        sh 'make -j${MAX_THREADS} buildworld'
      }
    }
    stage('Kernel') {
      steps {
        sh 'make -j${MAX_THREADS} buildkernel'
      }
    }
    stage('Base Packages') {
      environment {
	   // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('Trident-sign')
      }
      steps {
        sh 'rm -rf /usr/obj${WORKSPACE}/amd64.amd64/repo'
        sh 'make -j${MAX_THREADS} packages'
      }
    }
    stage('Ports') {
      environment {
	   // Get our credentials from Jenkins
           PKG_REPO_SIGNING_KEY = credentials('Trident-sign')
      }
      steps {
        sh 'cd release && make poudriere'
        // Sign the repo with our repo signing key
        sh 'cd /usr/local/poudriere/data/packages/trueos-mk-base-trueos-mk-ports && pkg-static repo . ${PKG_REPO_SIGNING_KEY}'
      }
    }
    stage('Release') {
      post {
        success {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
      }
      steps {
        sh 'rm -rf ${WORKSPACE}/artifacts'
        sh 'cd release && make release'
        sh 'mkdir -p ${WORKSPACE}/artifacts/repo'
        sh 'cp /usr/obj${WORKSPACE}/amd64.amd64/release/*.iso ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${WORKSPACE}/amd64.amd64/release/*.txz ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${WORKSPACE}/amd64.amd64/release/MANIFEST ${WORKSPACE}/artifacts'
      }
    }

    stage('Publish') {
      environment {
        REMOTE_USER='triton'
        REMOTE_SERVER='pkg.project-trident.org'
        REMOTE_PKG_DIR='/data/pkg/master'
        REMOTE_ISO_DIR='/data/iso/master'
      }
      steps {
        sshagent (credentials: ['Trident-publish']) {
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_PKG_DIR}/ports/$(pkg-static -o ABI_FILE=/bin/sh config ABI)/latest || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/local/poudriere/data/packages/trueos-mk-base-trueos-mk-ports/ ${REMOTE_USER}@${REMOTE_SERVER}:/${REMOTE_PKG_DIR}/ports/$(pkg-static -o ABI_FILE=/bin/sh config ABI)/latest/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_PKG_DIR}/base/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/obj${WORKSPACE}/repo/ ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_PKG_DIR}/base/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_USER}@${REMOTE_SERVER} mkdir -p ${REMOTE_ISO_DIR}/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifacts/ ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_ISO_DIR}'
        }
      }
    }
  }
  post {
    success {
      sh 'make clean'
      sh 'cd release && make clean'
      sh 'rm -rf /usr/obj${WORKSPACE}'
      script {
        cleanWs notFailBuild: true
      }
    }
  }
}
